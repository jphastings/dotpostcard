# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj

version: 2

before:
  hooks:
    - go mod tidy
    - go install github.com/valyala/quicktemplate/qtc@latest
    - go generate ./...

builds:
  -
    main: ./cmd/postcards
    id: postcards
    binary: postcards
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
      - wasip1
    goarch:
      - amd64
      - arm64
      - wasm
    ldflags:
      - -s -w -X "main.Date={{.CommitDate}}"
  -
    main: ./cmd/postoffice-serviceworker
    id: postoffice-serviceworker
    binary: postoffice-serviceworker
    tool: tinygo
    env:
      - CGO_ENABLED=0
    goos:
      - js
    goarch:
      - wasm
    ldflags:
      - ""
    hooks:
      pre:
        # This dir needs to be made manually because TinyGo doesn't create output directories
        # like Go does. https://github.com/tinygo-org/tinygo/issues/4687
        - mkdir -p {{ dir .Path }}
  # It's important the postoffice native binary is built after the WASM blob
  # As the WASM blob is baked into this server as part of an embed directive.
  # This needs to be done by calling goreleaser twice, specifying IDs to build.
  -
    main: ./cmd/postoffice
    id: postoffice
    binary: postoffice
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
      - wasip1
    goarch:
      - amd64
      - arm64
      - wasm
    ldflags:
      - -s -w -X "main.Date={{.CommitDate}}"

archives:
  - format: tar.gz
    # this name template makes the OS and Arch compatible with the results of `uname`.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    # use zip for windows archives
    format_overrides:
      - goos: windows
        format: zip
    allow_different_binary_count: true

changelog:
  sort: asc
  groups:
  - title: ‚ö†Ô∏è Breaking changes
    regexp: "BREAKING CHANGE"
    order: 0
  - title: üëÄ New features
    regexp: "^feat[(\\w)]*:+.*$"
    order: 1
  - title: üêõ Bug fixes
    regexp: "^fix[(\\w)]*:+.*$"
    order: 2
  - title: Others
    order: 999
  filters:
    exclude:
    - '^docs[(\\w)]*:'
    - '^style[(\\w)]*:'
    - '^refactor[(\\w)]*:'
    - '^test[(\\w)]*:'
    - '^build[(\\w)]*:'
    - '^ci[(\\w)]*:'
    - '^chore[(\\w)]*:'
    - '^revert:'
    - '^bump:'
release:
  prerelease: auto
  draft: false
brews:
- name: postcards
  repository:
    owner: jphastings
    name: homebrew-tools
    token: "{{ .Env.GITHUB_TOKEN }}"
  directory: Formula
  homepage: "https://dotpostcards.org/cli/postcards"
  description: "Tool for creating digital versions of physical postcards"
  license: "MIT"
  test: |
    resource("hello.postcard").stage do
      expected_start = "Convert digital representations of postcards between various formats.\n"
      actual_output = shell_output("#{bin}/postcards help")
      assert actual_output.start_with?(expected_start)
    end
