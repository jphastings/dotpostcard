Generates a USDA file for the postcard represented by params.
{% func USDA(params usdParams) %}#usda 1.0
(
    customLayerData = {
        dictionary Apple = {
            int preferredIblVersion = 2
        }
        string creator = "{%s params.Creator %}"
    }
    defaultPrim = "Postcard"
    metersPerUnit = 0.01
    upAxis = "Z"
)

def Xform "Postcard" (
    assetInfo = {
        string name = "Postcard"
    }
    kind = "component"
)
{
    def Scope "Materials"
    {
        def Material "sides"
        {
            token outputs:surface.connect = </Postcard/Materials/sides/surfaceShader.outputs:surface>

            def Shader "surfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </Postcard/Materials/sides/diffuseColor_texture.outputs:rgb>
                float inputs:metallic = 0
                float inputs:roughness = 0.8
                float inputs:specular = 0.1
                token outputs:surface
            }

            def Shader "diffuseColor_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (0, 0, 0, 0)
                asset inputs:file = @{%s params.SidesFilename %}@
                float4 inputs:scale = (1, 1, 1, 1)
                float2 inputs:st.connect = </Postcard/Materials/sides/texCoordReader.outputs:result>
                float3 outputs:rgb
            }

            def Shader "texCoordReader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "st"
                float2 outputs:result
            }
        }

        def Material "paper"
        {
            token outputs:surface.connect = </Postcard/Materials/paper/surfaceShader.outputs:surface>

            def Shader "surfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = ({%f float64(params.CardColor.R) / 255 %}, {%f float64(params.CardColor.G) / 255 %}, {%f float64(params.CardColor.B) / 255 %})
                float inputs:metallic = 0
                float inputs:roughness = 0.8
                float inputs:specular = 0.1
                token outputs:surface
            }
        }
    }

    def Scope "Geom"
    {
        def Mesh "Front" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 0
            
            float3[] extent = [({%f params.MaxX /-2 %},{%f params.MaxY /-2 %},{%f params.MaxZ %}),({%f params.MaxX /2 %},{%f params.MaxY /2 %},{%f params.MaxZ %})]
            rel material:binding = </Postcard/Materials/sides>

            int[] faceVertexCounts = [{% for i := 0; i < len(params.FrontTriangles) / 3; i++ %}3,{% endfor %}]
            int[] primvars:st:indices = [{% for _, t := range params.FrontTriangles %}{%d t %},{% endfor %}]
            int[] faceVertexIndices = [{% for _, t := range params.FrontTriangles %}{%d t %},{% endfor %}]
            {% code
                var textureMapY func(y float64) float64
                if params.OneSided {
                    textureMapY = func(y float64) float64 { return y }
                } else {
                    textureMapY = func(y float64) float64 { return y * 0.5 + 0.5 }
                }
            %}
            point3f[] points = [{% for _, pt := range params.FrontPoints %}({%f pt.X * params.MaxX - params.MaxX/2 %},{%f pt.Y * params.MaxY - params.MaxY/2 %},{%f params.MaxZ %}),{% endfor %}]
            texCoord2f[] primvars:st = [{% for _, v := range params.FrontPoints %}({%f v.X %},{%f textureMapY(v.Y) %}),{% endfor %}] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
        }

        def Mesh "Back" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 0
            uniform token orientation = "leftHanded"
    
            float3[] extent = [({%f params.MaxX /-2 %}, {%f params.MaxY /-2 %}, 0), ({%f params.MaxX /2 %}, {%f params.MaxY /2 %}, 0)]

            int[] faceVertexCounts = [{% for i := 0; i < len(params.BackTriangles) / 3; i++ %}3,{% endfor %}]
            int[] faceVertexIndices = [{% for _, t := range params.BackTriangles %}{%d t %},{% endfor %}]

            {% if params.OneSided %}
            rel material:binding = </Postcard/Materials/paper>
            {% else %}
            rel material:binding = </Postcard/Materials/sides>
            int[] primvars:st:indices = [{% for _, t := range params.BackTriangles %}{%d t %},{% endfor %}]

            texCoord2f[] primvars:st = [{% for _, v := range params.BackPoints %}({%f 1 - v.X %},{%f v.Y * 0.5 %}),{% endfor %}] (
                interpolation = "faceVarying"
            )
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"
            {% endif %}

            point3f[] points = [{% for _, pt := range params.BackPoints %}({%f pt.X * params.MaxX - params.MaxX/2 %},{%f pt.Y * params.MaxY - params.MaxY/2 %},0),{% endfor %}]
            uniform token subdivisionScheme = "none"
        }

        def Mesh "Paper" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 0
            float3[] extent = [({%f params.MaxX /-2 %}, {%f params.MaxY /-2 %}, 0), ({%f params.MaxX /2 %}, {%f params.MaxY /2 %}, {%f params.MaxZ %})]
            
            int[] faceVertexCounts = [{% for i := 0; i < len(params.SideTriangles) / 3; i++ %}3,{% endfor %}]
            int[] faceVertexIndices = [{% for _, t := range params.SideTriangles %}{%d t %},{% endfor %}]
            rel material:binding = </Postcard/Materials/paper>
            point3f[] points = [
                {% for _, pt := range params.FrontPoints %}({%f pt.X * params.MaxX - params.MaxX/2 %},{%f pt.Y * params.MaxY - params.MaxY/2 %},{%f params.MaxZ %}),{% endfor %}
                {% for _, pt := range params.BackPoints %}({%f pt.X * params.MaxX - params.MaxX/2 %},{%f pt.Y * params.MaxY - params.MaxY/2 %},0),{% endfor %}
            ]
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"
        }
    }

    def RealityKitComponent "Collider"
    {
        uint group = 1
        uniform token info:id = "RealityKit.Collider"
        uint mask = 4294967295
        token type = "Default"

        def RealityKitStruct "Shape"
        {
            float3 extent = ({%f params.MaxX %}, {%f params.MaxY %}, {%f params.MaxZ %})
            token shapeType = "Box"

            def RealityKitStruct "pose"
            {
                float3 position = ({%f params.MaxX / 2.0 %}, {%f params.MaxY / 2.0 %}, {%f params.MaxZ / 2.0 %})
            }
        }
    }

    def RealityKitComponent "RigidBody"
    {
        float angularDamping = 0.9
        uniform token info:id = "RealityKit.RigidBody"
        bool isCCDEnabled = 1
        float linearDamping = 0.0008
        # Physics means the postcards just falls forever when this is "Dynamic"!
        token motionType = "Static"
        
        def RealityKitStruct "massFrame"
        {
            # Tried calculating some values, not certain this is right
            float3 m_inertia = (0.00008334, 0.00018752, 0.00041667)
            float m_mass = {%f params.MassKg %}

            def RealityKitStruct "m_pose"
            {
                float3 position = ({%f params.MaxX / 2.0 %}, {%f params.MaxY / 2.0 %}, {%f params.MaxZ / 2.0 %})
            }
        }

        def RealityKitStruct "material"
        {
            double dynamicFriction = 0.2
            double restitution = 0.1
            double staticFriction = 0.5
        }
    }
{% if len(params.FlipAxis) != 0 %}
    def RealityKitComponent "RCP_BehaviorsContainer"
    {
        rel behaviors = </Postcard/OnTap>
        uniform token info:id = "RCP.BehaviorsContainer"
    }

    def Preliminary_Behavior "OnTap"
    {
        rel actions = </Postcard/OnTap/Action>
        uniform bool exclusive
        rel triggers = </Postcard/OnTap/Trigger>

        def Preliminary_Trigger "Trigger"
        {
            rel affectedObjects = </Postcard>
            token info:id = "TapGesture"
        }

        def Preliminary_Action "Action"
        {
            rel affectedObjects = </Postcard>
            rel animationLibraryKey = </Postcard/Flip>
            rel animationLibraryKeyOverrideKey = </Postcard/OnTap/Trigger>
            token info:id = "PlayTimeline"
            int loops = 0
            int performCount = 1
            token type = "serial"
        }
    }

    def RealityKitTimeline "Flip"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Spin"
            {
                string actionKind = "spin"
                int blendLayer = 400
                double duration = 0.75
                float3 localAxis = ({% for _, axis := range params.FlipAxis %}{%f axis %}, {% endfor %})
                float revolutions = 0.5
                double startTime = 0
                rel target = </Postcard>

                def RealityKitStruct "timingFunction"
                {
                    token type = "easeOut"
                }
            }
        }
    }
{% endif %}
}{% endfunc %}
