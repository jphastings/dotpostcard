// Code generated by qtc from "postcard.usda.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

// Generates a USDA file for the postcard represented by params.

//line postcard.usda.qtpl:2
package usd

//line postcard.usda.qtpl:2
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line postcard.usda.qtpl:2
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line postcard.usda.qtpl:2
func StreamUSDA(qw422016 *qt422016.Writer, params usdParams) {
//line postcard.usda.qtpl:2
	qw422016.N().S(`#usda 1.0
(
    customLayerData = {
        dictionary Apple = {
            int preferredIblVersion = 2
        }
        string creator = "`)
//line postcard.usda.qtpl:8
	qw422016.E().S(params.Creator)
//line postcard.usda.qtpl:8
	qw422016.N().S(`"
    }
    defaultPrim = "Postcard"
    metersPerUnit = 0.01
    upAxis = "Z"
)

def Xform "Postcard" (
    assetInfo = {
        string name = "Postcard"
    }
    kind = "component"
)
{
    def Scope "Materials"
    {
        def Material "sides"
        {
            token outputs:surface.connect = </Postcard/Materials/sides/surfaceShader.outputs:surface>

            def Shader "surfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </Postcard/Materials/sides/diffuseColor_texture.outputs:rgb>
                float inputs:metallic = 0
                float inputs:roughness = 0.8
                float inputs:specular = 0.1
                token outputs:surface
            }

            def Shader "diffuseColor_texture"
            {
                uniform token info:id = "UsdUVTexture"
                float4 inputs:bias = (0, 0, 0, 0)
                asset inputs:file = @`)
//line postcard.usda.qtpl:42
	qw422016.E().S(params.SidesFilename)
//line postcard.usda.qtpl:42
	qw422016.N().S(`@
                float4 inputs:scale = (1, 1, 1, 1)
                float2 inputs:st.connect = </Postcard/Materials/sides/texCoordReader.outputs:result>
                float3 outputs:rgb
            }

            def Shader "texCoordReader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "st"
                float2 outputs:result
            }
        }

        def Material "paper"
        {
            token outputs:surface.connect = </Postcard/Materials/paper/surfaceShader.outputs:surface>

            def Shader "surfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (`)
//line postcard.usda.qtpl:63
	qw422016.N().F(float64(params.CardColor.R) / 255)
//line postcard.usda.qtpl:63
	qw422016.N().S(`, `)
//line postcard.usda.qtpl:63
	qw422016.N().F(float64(params.CardColor.G) / 255)
//line postcard.usda.qtpl:63
	qw422016.N().S(`, `)
//line postcard.usda.qtpl:63
	qw422016.N().F(float64(params.CardColor.B) / 255)
//line postcard.usda.qtpl:63
	qw422016.N().S(`)
                float inputs:metallic = 0
                float inputs:roughness = 0.8
                float inputs:specular = 0.1
                token outputs:surface
            }
        }
    }

    def Scope "Geom"
    {
        def Mesh "Front"
        {
            uniform bool doubleSided = 0
            
            float3[] extent = [(`)
//line postcard.usda.qtpl:78
	qw422016.N().F(params.MaxX / -2)
//line postcard.usda.qtpl:78
	qw422016.N().S(`,`)
//line postcard.usda.qtpl:78
	qw422016.N().F(params.MaxY / -2)
//line postcard.usda.qtpl:78
	qw422016.N().S(`,`)
//line postcard.usda.qtpl:78
	qw422016.N().F(params.MaxZ)
//line postcard.usda.qtpl:78
	qw422016.N().S(`),(`)
//line postcard.usda.qtpl:78
	qw422016.N().F(params.MaxX / 2)
//line postcard.usda.qtpl:78
	qw422016.N().S(`,`)
//line postcard.usda.qtpl:78
	qw422016.N().F(params.MaxY / 2)
//line postcard.usda.qtpl:78
	qw422016.N().S(`,`)
//line postcard.usda.qtpl:78
	qw422016.N().F(params.MaxZ)
//line postcard.usda.qtpl:78
	qw422016.N().S(`)]
            rel material:binding = </Postcard/Materials/sides>

            int[] faceVertexCounts = [`)
//line postcard.usda.qtpl:81
	for i := 0; i < len(params.FrontTriangles)/3; i++ {
//line postcard.usda.qtpl:81
		qw422016.N().S(`3,`)
//line postcard.usda.qtpl:81
	}
//line postcard.usda.qtpl:81
	qw422016.N().S(`]
            int[] primvars:st:indices = [`)
//line postcard.usda.qtpl:82
	for _, t := range params.FrontTriangles {
//line postcard.usda.qtpl:82
		qw422016.N().D(t)
//line postcard.usda.qtpl:82
		qw422016.N().S(`,`)
//line postcard.usda.qtpl:82
	}
//line postcard.usda.qtpl:82
	qw422016.N().S(`]
            int[] faceVertexIndices = [`)
//line postcard.usda.qtpl:83
	for _, t := range params.FrontTriangles {
//line postcard.usda.qtpl:83
		qw422016.N().D(t)
//line postcard.usda.qtpl:83
		qw422016.N().S(`,`)
//line postcard.usda.qtpl:83
	}
//line postcard.usda.qtpl:83
	qw422016.N().S(`]

            point3f[] points = [`)
//line postcard.usda.qtpl:85
	for _, pt := range params.FrontPoints {
//line postcard.usda.qtpl:85
		qw422016.N().S(`(`)
//line postcard.usda.qtpl:85
		qw422016.N().F(pt.X*params.MaxX - params.MaxX/2)
//line postcard.usda.qtpl:85
		qw422016.N().S(`,`)
//line postcard.usda.qtpl:85
		qw422016.N().F(pt.Y*params.MaxY - params.MaxY/2)
//line postcard.usda.qtpl:85
		qw422016.N().S(`,`)
//line postcard.usda.qtpl:85
		qw422016.N().F(params.MaxZ)
//line postcard.usda.qtpl:85
		qw422016.N().S(`),`)
//line postcard.usda.qtpl:85
	}
//line postcard.usda.qtpl:85
	qw422016.N().S(`]
            texCoord2f[] primvars:st = [`)
//line postcard.usda.qtpl:86
	for _, v := range params.FrontPoints {
//line postcard.usda.qtpl:86
		qw422016.N().S(`(`)
//line postcard.usda.qtpl:86
		qw422016.N().F(v.X)
//line postcard.usda.qtpl:86
		qw422016.N().S(`,`)
//line postcard.usda.qtpl:86
		qw422016.N().F(v.Y*0.5 + 0.5)
//line postcard.usda.qtpl:86
		qw422016.N().S(`),`)
//line postcard.usda.qtpl:86
	}
//line postcard.usda.qtpl:86
	qw422016.N().S(`] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
        }

        def Mesh "Back"
        {
            uniform bool doubleSided = 0
            uniform token orientation = "leftHanded"
    
            float3[] extent = [(`)
//line postcard.usda.qtpl:97
	qw422016.N().F(params.MaxX / -2)
//line postcard.usda.qtpl:97
	qw422016.N().S(`, `)
//line postcard.usda.qtpl:97
	qw422016.N().F(params.MaxY / -2)
//line postcard.usda.qtpl:97
	qw422016.N().S(`, 0), (`)
//line postcard.usda.qtpl:97
	qw422016.N().F(params.MaxX / 2)
//line postcard.usda.qtpl:97
	qw422016.N().S(`, `)
//line postcard.usda.qtpl:97
	qw422016.N().F(params.MaxY / 2)
//line postcard.usda.qtpl:97
	qw422016.N().S(`, 0)]
            rel material:binding = </Postcard/Materials/sides>

            int[] faceVertexCounts = [`)
//line postcard.usda.qtpl:100
	for i := 0; i < len(params.BackTriangles)/3; i++ {
//line postcard.usda.qtpl:100
		qw422016.N().S(`3,`)
//line postcard.usda.qtpl:100
	}
//line postcard.usda.qtpl:100
	qw422016.N().S(`]
            int[] primvars:st:indices = [`)
//line postcard.usda.qtpl:101
	for _, t := range params.BackTriangles {
//line postcard.usda.qtpl:101
		qw422016.N().D(t)
//line postcard.usda.qtpl:101
		qw422016.N().S(`,`)
//line postcard.usda.qtpl:101
	}
//line postcard.usda.qtpl:101
	qw422016.N().S(`]
            int[] faceVertexIndices = [`)
//line postcard.usda.qtpl:102
	for _, t := range params.BackTriangles {
//line postcard.usda.qtpl:102
		qw422016.N().D(t)
//line postcard.usda.qtpl:102
		qw422016.N().S(`,`)
//line postcard.usda.qtpl:102
	}
//line postcard.usda.qtpl:102
	qw422016.N().S(`]

            point3f[] points = [`)
//line postcard.usda.qtpl:104
	for _, pt := range params.BackPoints {
//line postcard.usda.qtpl:104
		qw422016.N().S(`(`)
//line postcard.usda.qtpl:104
		qw422016.N().F(pt.X*params.MaxX - params.MaxX/2)
//line postcard.usda.qtpl:104
		qw422016.N().S(`,`)
//line postcard.usda.qtpl:104
		qw422016.N().F(pt.Y*params.MaxY - params.MaxY/2)
//line postcard.usda.qtpl:104
		qw422016.N().S(`,0),`)
//line postcard.usda.qtpl:104
	}
//line postcard.usda.qtpl:104
	qw422016.N().S(`]
            texCoord2f[] primvars:st = [`)
//line postcard.usda.qtpl:105
	for _, v := range params.BackPoints {
//line postcard.usda.qtpl:105
		qw422016.N().S(`(`)
//line postcard.usda.qtpl:105
		qw422016.N().F(1 - v.X)
//line postcard.usda.qtpl:105
		qw422016.N().S(`,`)
//line postcard.usda.qtpl:105
		qw422016.N().F(v.Y * 0.5)
//line postcard.usda.qtpl:105
		qw422016.N().S(`),`)
//line postcard.usda.qtpl:105
	}
//line postcard.usda.qtpl:105
	qw422016.N().S(`] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
        }

        def Mesh "Paper"
        {
            uniform bool doubleSided = 0
            float3[] extent = [(`)
//line postcard.usda.qtpl:114
	qw422016.N().F(params.MaxX / -2)
//line postcard.usda.qtpl:114
	qw422016.N().S(`, `)
//line postcard.usda.qtpl:114
	qw422016.N().F(params.MaxY / -2)
//line postcard.usda.qtpl:114
	qw422016.N().S(`, 0), (`)
//line postcard.usda.qtpl:114
	qw422016.N().F(params.MaxX / 2)
//line postcard.usda.qtpl:114
	qw422016.N().S(`, `)
//line postcard.usda.qtpl:114
	qw422016.N().F(params.MaxY / 2)
//line postcard.usda.qtpl:114
	qw422016.N().S(`, `)
//line postcard.usda.qtpl:114
	qw422016.N().F(params.MaxZ)
//line postcard.usda.qtpl:114
	qw422016.N().S(`)]
            
            int[] faceVertexCounts = [`)
//line postcard.usda.qtpl:116
	for i := 0; i < len(params.SideTriangles)/3; i++ {
//line postcard.usda.qtpl:116
		qw422016.N().S(`3,`)
//line postcard.usda.qtpl:116
	}
//line postcard.usda.qtpl:116
	qw422016.N().S(`]
            int[] faceVertexIndices = [`)
//line postcard.usda.qtpl:117
	for _, t := range params.SideTriangles {
//line postcard.usda.qtpl:117
		qw422016.N().D(t)
//line postcard.usda.qtpl:117
		qw422016.N().S(`,`)
//line postcard.usda.qtpl:117
	}
//line postcard.usda.qtpl:117
	qw422016.N().S(`]
            rel material:binding = </Postcard/Materials/paper>
            point3f[] points = [
                `)
//line postcard.usda.qtpl:120
	for _, pt := range params.FrontPoints {
//line postcard.usda.qtpl:120
		qw422016.N().S(`(`)
//line postcard.usda.qtpl:120
		qw422016.N().F(pt.X*params.MaxX - params.MaxX/2)
//line postcard.usda.qtpl:120
		qw422016.N().S(`,`)
//line postcard.usda.qtpl:120
		qw422016.N().F(pt.Y*params.MaxY - params.MaxY/2)
//line postcard.usda.qtpl:120
		qw422016.N().S(`,`)
//line postcard.usda.qtpl:120
		qw422016.N().F(params.MaxZ)
//line postcard.usda.qtpl:120
		qw422016.N().S(`),`)
//line postcard.usda.qtpl:120
	}
//line postcard.usda.qtpl:120
	qw422016.N().S(`
                `)
//line postcard.usda.qtpl:121
	for _, pt := range params.BackPoints {
//line postcard.usda.qtpl:121
		qw422016.N().S(`(`)
//line postcard.usda.qtpl:121
		qw422016.N().F(pt.X*params.MaxX - params.MaxX/2)
//line postcard.usda.qtpl:121
		qw422016.N().S(`,`)
//line postcard.usda.qtpl:121
		qw422016.N().F(pt.Y*params.MaxY - params.MaxY/2)
//line postcard.usda.qtpl:121
		qw422016.N().S(`,0),`)
//line postcard.usda.qtpl:121
	}
//line postcard.usda.qtpl:121
	qw422016.N().S(`
            ]
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"
        }
    }

    def RealityKitComponent "Collider"
    {
        uint group = 1
        uniform token info:id = "RealityKit.Collider"
        uint mask = 4294967295
        token type = "Default"

        def RealityKitStruct "Shape"
        {
            float3 extent = (`)
//line postcard.usda.qtpl:137
	qw422016.N().F(params.MaxX)
//line postcard.usda.qtpl:137
	qw422016.N().S(`, `)
//line postcard.usda.qtpl:137
	qw422016.N().F(params.MaxY)
//line postcard.usda.qtpl:137
	qw422016.N().S(`, `)
//line postcard.usda.qtpl:137
	qw422016.N().F(params.MaxZ)
//line postcard.usda.qtpl:137
	qw422016.N().S(`)
            token shapeType = "Box"

            def RealityKitStruct "pose"
            {
                float3 position = (`)
//line postcard.usda.qtpl:142
	qw422016.N().F(params.MaxX / 2.0)
//line postcard.usda.qtpl:142
	qw422016.N().S(`, `)
//line postcard.usda.qtpl:142
	qw422016.N().F(params.MaxY / 2.0)
//line postcard.usda.qtpl:142
	qw422016.N().S(`, `)
//line postcard.usda.qtpl:142
	qw422016.N().F(params.MaxZ / 2.0)
//line postcard.usda.qtpl:142
	qw422016.N().S(`)
            }
        }
    }

    def RealityKitComponent "RigidBody"
    {
        float angularDamping = 0.9
        uniform token info:id = "RealityKit.RigidBody"
        bool isCCDEnabled = 1
        float linearDamping = 0.0008
        # Physics means the postcards just falls forever when this is "Dynamic"!
        token motionType = "Static"
        
        def RealityKitStruct "massFrame"
        {
            # Tried calculating some values, not certain this is right
            float3 m_inertia = (0.00008334, 0.00018752, 0.00041667)
            float m_mass = `)
//line postcard.usda.qtpl:160
	qw422016.N().F(params.MassKg)
//line postcard.usda.qtpl:160
	qw422016.N().S(`

            def RealityKitStruct "m_pose"
            {
                float3 position = (`)
//line postcard.usda.qtpl:164
	qw422016.N().F(params.MaxX / 2.0)
//line postcard.usda.qtpl:164
	qw422016.N().S(`, `)
//line postcard.usda.qtpl:164
	qw422016.N().F(params.MaxY / 2.0)
//line postcard.usda.qtpl:164
	qw422016.N().S(`, `)
//line postcard.usda.qtpl:164
	qw422016.N().F(params.MaxZ / 2.0)
//line postcard.usda.qtpl:164
	qw422016.N().S(`)
            }
        }

        def RealityKitStruct "material"
        {
            double dynamicFriction = 0.2
            double restitution = 0.1
            double staticFriction = 0.5
        }
    }
`)
//line postcard.usda.qtpl:175
	if len(params.FlipAxis) != 0 {
//line postcard.usda.qtpl:175
		qw422016.N().S(`
    def RealityKitComponent "RCP_BehaviorsContainer"
    {
        rel behaviors = </Postcard/OnTap>
        uniform token info:id = "RCP.BehaviorsContainer"
    }

    def Preliminary_Behavior "OnTap"
    {
        rel actions = </Postcard/OnTap/Action>
        uniform bool exclusive
        rel triggers = </Postcard/OnTap/Trigger>

        def Preliminary_Trigger "Trigger"
        {
            rel affectedObjects = </Postcard>
            token info:id = "TapGesture"
        }

        def Preliminary_Action "Action"
        {
            rel affectedObjects = </Postcard>
            rel animationLibraryKey = </Postcard/Flip>
            rel animationLibraryKeyOverrideKey = </Postcard/OnTap/Trigger>
            token info:id = "PlayTimeline"
            int loops = 0
            int performCount = 1
            token type = "serial"
        }
    }

    def RealityKitTimeline "Flip"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Spin"
            {
                string actionKind = "spin"
                int blendLayer = 400
                double duration = 0.75
                float3 localAxis = (`)
//line postcard.usda.qtpl:215
		for _, axis := range params.FlipAxis {
//line postcard.usda.qtpl:215
			qw422016.N().F(axis)
//line postcard.usda.qtpl:215
			qw422016.N().S(`, `)
//line postcard.usda.qtpl:215
		}
//line postcard.usda.qtpl:215
		qw422016.N().S(`)
                float revolutions = 0.5
                double startTime = 0
                rel target = </Postcard>

                def RealityKitStruct "timingFunction"
                {
                    token type = "easeOut"
                }
            }
        }
    }
`)
//line postcard.usda.qtpl:227
	}
//line postcard.usda.qtpl:227
	qw422016.N().S(`
}`)
//line postcard.usda.qtpl:228
}

//line postcard.usda.qtpl:228
func WriteUSDA(qq422016 qtio422016.Writer, params usdParams) {
//line postcard.usda.qtpl:228
	qw422016 := qt422016.AcquireWriter(qq422016)
//line postcard.usda.qtpl:228
	StreamUSDA(qw422016, params)
//line postcard.usda.qtpl:228
	qt422016.ReleaseWriter(qw422016)
//line postcard.usda.qtpl:228
}

//line postcard.usda.qtpl:228
func USDA(params usdParams) string {
//line postcard.usda.qtpl:228
	qb422016 := qt422016.AcquireByteBuffer()
//line postcard.usda.qtpl:228
	WriteUSDA(qb422016, params)
//line postcard.usda.qtpl:228
	qs422016 := string(qb422016.B)
//line postcard.usda.qtpl:228
	qt422016.ReleaseByteBuffer(qb422016)
//line postcard.usda.qtpl:228
	return qs422016
//line postcard.usda.qtpl:228
}
