// Code generated by qtc from "postcard.html.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

// Generates the HTML needed to display a web postcard.

//line postcard.html.qtpl:2
package html

//line postcard.html.qtpl:2
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line postcard.html.qtpl:2
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line postcard.html.qtpl:2
func StreamHTML(qw422016 *qt422016.Writer, v htmlVars) {
//line postcard.html.qtpl:2
	qw422016.N().S(`<!-- Make sure you reference postcards.css in your <head> -->
<link rel="stylesheet" type="text/css" href="postcards.css">
<!-- You can set the width of .postcard in CSS to limit the size of all postcards on your page -->
<style>.postcard { max-width: 50vw; margin: auto; } body { margin: 1em; }</style>
<!-- Put the lines following this wherever you want your postcard -->

<input type="checkbox" id="postcard-`)
//line postcard.html.qtpl:8
	qw422016.E().S(v.Name)
//line postcard.html.qtpl:8
	qw422016.N().S(`" style="display:none">
<label for="postcard-`)
//line postcard.html.qtpl:9
	qw422016.E().S(v.Name)
//line postcard.html.qtpl:9
	qw422016.N().S(`" class="postcard flip-`)
//line postcard.html.qtpl:9
	qw422016.E().S(string(v.Flip))
//line postcard.html.qtpl:9
	qw422016.N().S(` `)
//line postcard.html.qtpl:9
	qw422016.E().S(string(v.Physical.FrontDimensions.Orientation()))
//line postcard.html.qtpl:9
	qw422016.N().S(`" style="--postcard: url('`)
//line postcard.html.qtpl:9
	qw422016.E().S(v.Name)
//line postcard.html.qtpl:9
	qw422016.N().S(`.postcard`)
//line postcard.html.qtpl:9
	qw422016.E().S(v.ImageExt)
//line postcard.html.qtpl:9
	qw422016.N().S(`'); --aspect-ratio: `)
//line postcard.html.qtpl:9
	qw422016.N().D(v.Physical.FrontDimensions.PxWidth)
//line postcard.html.qtpl:9
	qw422016.N().S(` / `)
//line postcard.html.qtpl:9
	qw422016.N().D(v.Physical.FrontDimensions.PxHeight)
//line postcard.html.qtpl:9
	qw422016.N().S(`">
	<img src="`)
//line postcard.html.qtpl:10
	qw422016.E().S(v.Name)
//line postcard.html.qtpl:10
	qw422016.N().S(`.postcard`)
//line postcard.html.qtpl:10
	qw422016.E().S(v.ImageExt)
//line postcard.html.qtpl:10
	qw422016.N().S(`" loading="lazy" alt="`)
//line postcard.html.qtpl:10
	qw422016.E().S(v.Front.Description)
//line postcard.html.qtpl:10
	qw422016.N().S(`">
	<div class="shadow"></div>
</label>`)
//line postcard.html.qtpl:12
}

//line postcard.html.qtpl:12
func WriteHTML(qq422016 qtio422016.Writer, v htmlVars) {
//line postcard.html.qtpl:12
	qw422016 := qt422016.AcquireWriter(qq422016)
//line postcard.html.qtpl:12
	StreamHTML(qw422016, v)
//line postcard.html.qtpl:12
	qt422016.ReleaseWriter(qw422016)
//line postcard.html.qtpl:12
}

//line postcard.html.qtpl:12
func HTML(v htmlVars) string {
//line postcard.html.qtpl:12
	qb422016 := qt422016.AcquireByteBuffer()
//line postcard.html.qtpl:12
	WriteHTML(qb422016, v)
//line postcard.html.qtpl:12
	qs422016 := string(qb422016.B)
//line postcard.html.qtpl:12
	qt422016.ReleaseByteBuffer(qb422016)
//line postcard.html.qtpl:12
	return qs422016
//line postcard.html.qtpl:12
}
